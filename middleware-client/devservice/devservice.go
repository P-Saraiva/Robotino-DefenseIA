// Code generated by gowsdl DO NOT EDIT.

package devservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

// device access rights

type EAccess string

const (
	EAccessSERVICEREAD EAccess = "SERVICE-READ"

	EAccessSERVICEWRITE EAccess = "SERVICE-WRITE"

	EAccessSERVICEREADWRITE EAccess = "SERVICE-READ-WRITE"

	EAccessSERVICEEXCLUSIVE EAccess = "SERVICE-EXCLUSIVE"
)

type Open struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager open"`

	Id int32 `xml:"id,omitempty" json:"id,omitempty"`

	AccessMode *EAccess `xml:"accessMode,omitempty" json:"accessMode,omitempty"`
}

type OpenResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager openResponse"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type OpenAuthenticated struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager openAuthenticated"`

	Id int32 `xml:"id,omitempty" json:"id,omitempty"`

	Credentials *Credentials `xml:"credentials,omitempty" json:"credentials,omitempty"`

	AccessMode *EAccess `xml:"accessMode,omitempty" json:"accessMode,omitempty"`
}

type OpenAuthenticatedResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager openAuthenticatedResponse"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type Close struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager close"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type CloseResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager closeResponse"`
}

type List struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager list"`
}

type ListResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager listResponse"`

	Devices []*Descriptor `xml:"devices,omitempty" json:"devices,omitempty"`
}

type KeepAlive struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager keepAlive"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type KeepAliveResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/DeviceManager keepAliveResponse"`
}

type Descriptor struct {
	Id int32 `xml:"id,omitempty" json:"id,omitempty"`

	Vendor string `xml:"vendor,omitempty" json:"vendor,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	VersionMajor int32 `xml:"versionMajor,omitempty" json:"versionMajor,omitempty"`

	VersionMinor int32 `xml:"versionMinor,omitempty" json:"versionMinor,omitempty"`

	MaxTimeout int32 `xml:"maxTimeout,omitempty" json:"maxTimeout,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`
}

type Credentials struct {
	Userid string `xml:"user-id,omitempty" json:"user-id,omitempty"`

	Userpassword string `xml:"user-password,omitempty" json:"user-password,omitempty"`
}

type DeviceManagerPortType interface {

	/* Service definition of function rdev__open */
	Open(request *Open) (*OpenResponse, error)

	OpenContext(ctx context.Context, request *Open) (*OpenResponse, error)

	/* Service definition of function rdev__openAuthenticated */
	OpenAuthenticated(request *OpenAuthenticated) (*OpenAuthenticatedResponse, error)

	OpenAuthenticatedContext(ctx context.Context, request *OpenAuthenticated) (*OpenAuthenticatedResponse, error)

	/* Service definition of function rdev__close */
	Close(request *Close) (*CloseResponse, error)

	CloseContext(ctx context.Context, request *Close) (*CloseResponse, error)

	/* Service definition of function rdev__list */
	List(request *List) (*ListResponse, error)

	ListContext(ctx context.Context, request *List) (*ListResponse, error)

	/* Service definition of function rdev__keepAlive */
	KeepAlive(request *KeepAlive) (*KeepAliveResponse, error)

	KeepAliveContext(ctx context.Context, request *KeepAlive) (*KeepAliveResponse, error)
}

type deviceManagerPortType struct {
	client *soap.Client
}

func NewDeviceManagerPortType(client *soap.Client) DeviceManagerPortType {
	return &deviceManagerPortType{
		client: client,
	}
}

func (service *deviceManagerPortType) OpenContext(ctx context.Context, request *Open) (*OpenResponse, error) {
	response := new(OpenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *deviceManagerPortType) Open(request *Open) (*OpenResponse, error) {
	return service.OpenContext(
		context.Background(),
		request,
	)
}

func (service *deviceManagerPortType) OpenAuthenticatedContext(ctx context.Context, request *OpenAuthenticated) (*OpenAuthenticatedResponse, error) {
	response := new(OpenAuthenticatedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *deviceManagerPortType) OpenAuthenticated(request *OpenAuthenticated) (*OpenAuthenticatedResponse, error) {
	return service.OpenAuthenticatedContext(
		context.Background(),
		request,
	)
}

func (service *deviceManagerPortType) CloseContext(ctx context.Context, request *Close) (*CloseResponse, error) {
	response := new(CloseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *deviceManagerPortType) Close(request *Close) (*CloseResponse, error) {
	return service.CloseContext(
		context.Background(),
		request,
	)
}

func (service *deviceManagerPortType) ListContext(ctx context.Context, request *List) (*ListResponse, error) {
	response := new(ListResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *deviceManagerPortType) List(request *List) (*ListResponse, error) {
	return service.ListContext(
		context.Background(),
		request,
	)
}

func (service *deviceManagerPortType) KeepAliveContext(ctx context.Context, request *KeepAlive) (*KeepAliveResponse, error) {
	response := new(KeepAliveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *deviceManagerPortType) KeepAlive(request *KeepAlive) (*KeepAliveResponse, error) {
	return service.KeepAliveContext(
		context.Background(),
		request,
	)
}
