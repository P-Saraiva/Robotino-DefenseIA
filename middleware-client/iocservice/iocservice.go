// Code generated by gowsdl DO NOT EDIT.

package iocservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type Update struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl update"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Setstate *SetState `xml:"setstate,omitempty" json:"setstate,omitempty"`
}

type SensorState struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl SensorState"`

	PowerOutputCurrent float32 `xml:"powerOutputCurrent,omitempty" json:"powerOutputCurrent,omitempty"`

	PowerOutputRawCurrent float32 `xml:"powerOutputRawCurrent,omitempty" json:"powerOutputRawCurrent,omitempty"`

	EncoderInputPosition int32 `xml:"encoderInputPosition,omitempty" json:"encoderInputPosition,omitempty"`

	EncoderInputVelocity int32 `xml:"encoderInputVelocity,omitempty" json:"encoderInputVelocity,omitempty"`

	ActualSpeed *Array3Ofxsd__float `xml:"actualSpeed,omitempty" json:"actualSpeed,omitempty"`

	ActualPosition *Array3Ofxsd__int `xml:"actualPosition,omitempty" json:"actualPosition,omitempty"`

	MotorCurrent *Array3Ofxsd__float `xml:"motorCurrent,omitempty" json:"motorCurrent,omitempty"`

	RawMotorCurrent *Array3Ofxsd__float `xml:"rawMotorCurrent,omitempty" json:"rawMotorCurrent,omitempty"`

	DIn *Array8Ofxsd__boolean `xml:"dIn,omitempty" json:"dIn,omitempty"`

	AIn *Array8Ofxsd__float `xml:"aIn,omitempty" json:"aIn,omitempty"`

	DistanceSensor *Array9Ofxsd__float `xml:"distanceSensor,omitempty" json:"distanceSensor,omitempty"`

	Bumper bool `xml:"bumper,omitempty" json:"bumper,omitempty"`

	Current float32 `xml:"current,omitempty" json:"current,omitempty"`

	Voltage float32 `xml:"voltage,omitempty" json:"voltage,omitempty"`

	Info string `xml:"info,omitempty" json:"info,omitempty"`

	IsPassiveMode bool `xml:"isPassiveMode,omitempty" json:"isPassiveMode,omitempty"`

	IsGripperOpened bool `xml:"isGripperOpened,omitempty" json:"isGripperOpened,omitempty"`

	IsGripperClosed bool `xml:"isGripperClosed,omitempty" json:"isGripperClosed,omitempty"`

	OdometryX float64 `xml:"odometryX,omitempty" json:"odometryX,omitempty"`

	OdometryY float64 `xml:"odometryY,omitempty" json:"odometryY,omitempty"`

	OdometryPhi float64 `xml:"odometryPhi,omitempty" json:"odometryPhi,omitempty"`

	Q2pUpdateCounter uint32 `xml:"q2pUpdateCounter,omitempty" json:"q2pUpdateCounter,omitempty"`
}

type Reset struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl reset"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type ResetResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl resetResponse"`
}

type NumMotors struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numMotors"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type NumMotorsResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numMotorsResponse"`

	N byte `xml:"n,omitempty" json:"n,omitempty"`
}

type SetMotorVelocity struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setMotorVelocity"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Motor byte `xml:"motor,omitempty" json:"motor,omitempty"`

	Rpm float32 `xml:"rpm,omitempty" json:"rpm,omitempty"`
}

type SetMotorVelocityResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setMotorVelocityResponse"`
}

type SetVelocity struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setVelocity"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	VX float32 `xml:"vX,omitempty" json:"vX,omitempty"`

	VY float32 `xml:"vY,omitempty" json:"vY,omitempty"`

	VOmega float32 `xml:"vOmega,omitempty" json:"vOmega,omitempty"`
}

type SetVelocityResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setVelocityResponse"`
}

type ResetPosition struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl resetPosition"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Motor byte `xml:"motor,omitempty" json:"motor,omitempty"`
}

type ResetPositionResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl resetPositionResponse"`
}

type SetBrake struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setBrake"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Motor byte `xml:"motor,omitempty" json:"motor,omitempty"`

	On byte `xml:"on,omitempty" json:"on,omitempty"`
}

type SetBrakeResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setBrakeResponse"`
}

type MotorCurrent struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl motorCurrent"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Motor byte `xml:"motor,omitempty" json:"motor,omitempty"`
}

type MotorCurrentResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl motorCurrentResponse"`

	Current float32 `xml:"current,omitempty" json:"current,omitempty"`
}

type MotorActualPosition struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl motorActualPosition"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Motor byte `xml:"motor,omitempty" json:"motor,omitempty"`
}

type MotorActualPositionResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl motorActualPositionResponse"`

	Position int32 `xml:"position,omitempty" json:"position,omitempty"`
}

type GetActualMotorVelocity struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getActualMotorVelocity"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Motor byte `xml:"motor,omitempty" json:"motor,omitempty"`
}

type GetActualMotorVelocityResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getActualMotorVelocityResponse"`

	Rpm float32 `xml:"rpm,omitempty" json:"rpm,omitempty"`
}

type GetActualVelocity struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getActualVelocity"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type GetActualVelocityResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getActualVelocityResponse"`

	VX float32 `xml:"vX,omitempty" json:"vX,omitempty"`

	VY float32 `xml:"vY,omitempty" json:"vY,omitempty"`

	VOmega float32 `xml:"vOmega,omitempty" json:"vOmega,omitempty"`
}

type SetOdometry struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setOdometry"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	PosX float64 `xml:"posX,omitempty" json:"posX,omitempty"`

	PosY float64 `xml:"posY,omitempty" json:"posY,omitempty"`

	Phi float64 `xml:"phi,omitempty" json:"phi,omitempty"`
}

type SetOdometryResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setOdometryResponse"`
}

type GetOdometry struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getOdometry"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type GetOdometryResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getOdometryResponse"`

	PosX float64 `xml:"posX,omitempty" json:"posX,omitempty"`

	PosY float64 `xml:"posY,omitempty" json:"posY,omitempty"`

	Phi float64 `xml:"phi,omitempty" json:"phi,omitempty"`
}

type SetMotorConstants struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setMotorConstants"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Motor byte `xml:"motor,omitempty" json:"motor,omitempty"`

	Kp float32 `xml:"kp,omitempty" json:"kp,omitempty"`

	Kd float32 `xml:"kd,omitempty" json:"kd,omitempty"`

	Ki float32 `xml:"ki,omitempty" json:"ki,omitempty"`
}

type SetMotorConstantsResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setMotorConstantsResponse"`
}

type GetMotorConstants struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getMotorConstants"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Motor byte `xml:"motor,omitempty" json:"motor,omitempty"`
}

type GetMotorConstantsResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getMotorConstantsResponse"`

	Kp float32 `xml:"kp,omitempty" json:"kp,omitempty"`

	Kd float32 `xml:"kd,omitempty" json:"kd,omitempty"`

	Ki float32 `xml:"ki,omitempty" json:"ki,omitempty"`
}

type NumDigitalOutput struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numDigitalOutput"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type NumDigitalOutputResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numDigitalOutputResponse"`

	N byte `xml:"n,omitempty" json:"n,omitempty"`
}

type SetDigitalOutput struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setDigitalOutput"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Index byte `xml:"index,omitempty" json:"index,omitempty"`

	Set bool `xml:"set,omitempty" json:"set,omitempty"`
}

type SetDigitalOutputResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setDigitalOutputResponse"`
}

type NumDigitalInput struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numDigitalInput"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type NumDigitalInputResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numDigitalInputResponse"`

	N byte `xml:"n,omitempty" json:"n,omitempty"`
}

type GetDigitalInput struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getDigitalInput"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Index byte `xml:"index,omitempty" json:"index,omitempty"`
}

type GetDigitalInputResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getDigitalInputResponse"`

	Set bool `xml:"set,omitempty" json:"set,omitempty"`
}

type GetBumper struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getBumper"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type GetBumperResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getBumperResponse"`

	Set bool `xml:"set,omitempty" json:"set,omitempty"`
}

type NumAnalogInput struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numAnalogInput"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type NumAnalogInputResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numAnalogInputResponse"`

	N byte `xml:"n,omitempty" json:"n,omitempty"`
}

type GetAnalogInput struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getAnalogInput"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Index byte `xml:"index,omitempty" json:"index,omitempty"`
}

type GetAnalogInputResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getAnalogInputResponse"`

	Value float32 `xml:"value,omitempty" json:"value,omitempty"`
}

type NumDistanceSensors struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numDistanceSensors"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type NumDistanceSensorsResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl numDistanceSensorsResponse"`

	N byte `xml:"n,omitempty" json:"n,omitempty"`
}

type GetDistanceSensor struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getDistanceSensor"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Index byte `xml:"index,omitempty" json:"index,omitempty"`
}

type GetDistanceSensorResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl getDistanceSensorResponse"`

	Value float32 `xml:"value,omitempty" json:"value,omitempty"`
}

type SystemCurrent struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl systemCurrent"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type SystemCurrentResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl systemCurrentResponse"`

	Current float32 `xml:"current,omitempty" json:"current,omitempty"`
}

type SystemVoltage struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl systemVoltage"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`
}

type SystemVoltageResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl systemVoltageResponse"`

	Voltage float32 `xml:"voltage,omitempty" json:"voltage,omitempty"`
}

type SetRelay struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setRelay"`

	Token int32 `xml:"token,omitempty" json:"token,omitempty"`

	Number byte `xml:"number,omitempty" json:"number,omitempty"`

	On byte `xml:"on,omitempty" json:"on,omitempty"`
}

type SetRelayResponse struct {
	XMLName xml.Name `xml:"urn:roboticsec.de/IOControl setRelayResponse"`
}

type SetState struct {
	Brake *Array3Ofxsd__boolean `xml:"brake,omitempty" json:"brake,omitempty"`

	SetPointSpeed *Array3Ofxsd__float `xml:"setPointSpeed,omitempty" json:"setPointSpeed,omitempty"`

	ResetPosition *Array3Ofxsd__boolean `xml:"resetPosition,omitempty" json:"resetPosition,omitempty"`

	IsDriveSystemControl bool `xml:"isDriveSystemControl,omitempty" json:"isDriveSystemControl,omitempty"`

	Vx float32 `xml:"vx,omitempty" json:"vx,omitempty"`

	Vy float32 `xml:"vy,omitempty" json:"vy,omitempty"`

	Vomega float32 `xml:"vomega,omitempty" json:"vomega,omitempty"`

	Kp *Array3Ofxsd__float `xml:"kp,omitempty" json:"kp,omitempty"`

	Ki *Array3Ofxsd__float `xml:"ki,omitempty" json:"ki,omitempty"`

	Kd *Array3Ofxsd__float `xml:"kd,omitempty" json:"kd,omitempty"`

	DOut *Array8Ofxsd__boolean `xml:"dOut,omitempty" json:"dOut,omitempty"`

	Relays *Array2Ofxsd__boolean `xml:"relays,omitempty" json:"relays,omitempty"`

	PowerOutputSetPoint float32 `xml:"powerOutputSetPoint,omitempty" json:"powerOutputSetPoint,omitempty"`

	EncoderInputResetPosition bool `xml:"encoderInputResetPosition,omitempty" json:"encoderInputResetPosition,omitempty"`

	ImageResolution byte `xml:"imageResolution,omitempty" json:"imageResolution,omitempty"`

	ClosedGripper bool `xml:"closedGripper,omitempty" json:"closedGripper,omitempty"`

	EnableGripper bool `xml:"enableGripper,omitempty" json:"enableGripper,omitempty"`

	SetOdometry bool `xml:"setOdometry,omitempty" json:"setOdometry,omitempty"`

	OdometryX float64 `xml:"odometryX,omitempty" json:"odometryX,omitempty"`

	OdometryY float64 `xml:"odometryY,omitempty" json:"odometryY,omitempty"`

	OdometryPhi float64 `xml:"odometryPhi,omitempty" json:"odometryPhi,omitempty"`

	Shutdown bool `xml:"shutdown,omitempty" json:"shutdown,omitempty"`

	Q2pUpdateCounter uint32 `xml:"q2pUpdateCounter,omitempty" json:"q2pUpdateCounter,omitempty"`
}

type Array9Ofxsd__float struct {
}

type Array8Ofxsd__float struct {
}

type Array3Ofxsd__int struct {
}

type Array2Ofxsd__boolean struct {
}

type Array8Ofxsd__boolean struct {
}

type Array3Ofxsd__float struct {
}

type Array3Ofxsd__boolean struct {
}

type IOControlPortType interface {

	/* Send the collection of set point values to and receive the collection of sensor readings from Robotino. */
	Update(request *Update) (*SensorState, error)

	UpdateContext(ctx context.Context, request *Update) (*SensorState, error)

	/* Resets Robotino to its initial state. Also resets the odometry. */
	Reset(request *Reset) (*ResetResponse, error)

	ResetContext(ctx context.Context, request *Reset) (*ResetResponse, error)

	/* Returns the number of available motors */
	NumMotors(request *NumMotors) (*NumMotorsResponse, error)

	NumMotorsContext(ctx context.Context, request *NumMotors) (*NumMotorsResponse, error)

	/* Sets the velocity of a single motor */
	SetMotorVelocity(request *SetMotorVelocity) (*SetMotorVelocityResponse, error)

	SetMotorVelocityContext(ctx context.Context, request *SetMotorVelocity) (*SetMotorVelocityResponse, error)

	/* Sets the velocity of the robot */
	SetVelocity(request *SetVelocity) (*SetVelocityResponse, error)

	SetVelocityContext(ctx context.Context, request *SetVelocity) (*SetVelocityResponse, error)

	/* Service definition of function rioc__resetPosition */
	ResetPosition(request *ResetPosition) (*ResetPositionResponse, error)

	ResetPositionContext(ctx context.Context, request *ResetPosition) (*ResetPositionResponse, error)

	/* Service definition of function rioc__setBrake */
	SetBrake(request *SetBrake) (*SetBrakeResponse, error)

	SetBrakeContext(ctx context.Context, request *SetBrake) (*SetBrakeResponse, error)

	/* Service definition of function rioc__motorCurrent */
	MotorCurrent(request *MotorCurrent) (*MotorCurrentResponse, error)

	MotorCurrentContext(ctx context.Context, request *MotorCurrent) (*MotorCurrentResponse, error)

	/* Service definition of function rioc__motorActualPosition */
	MotorActualPosition(request *MotorActualPosition) (*MotorActualPositionResponse, error)

	MotorActualPositionContext(ctx context.Context, request *MotorActualPosition) (*MotorActualPositionResponse, error)

	/* Retrieves the actual velocity of a specific motor */
	GetActualMotorVelocity(request *GetActualMotorVelocity) (*GetActualMotorVelocityResponse, error)

	GetActualMotorVelocityContext(ctx context.Context, request *GetActualMotorVelocity) (*GetActualMotorVelocityResponse, error)

	/* Retrieves the actual velocity of the robot */
	GetActualVelocity(request *GetActualVelocity) (*GetActualVelocityResponse, error)

	GetActualVelocityContext(ctx context.Context, request *GetActualVelocity) (*GetActualVelocityResponse, error)

	/* Sets the odometry */
	SetOdometry(request *SetOdometry) (*SetOdometryResponse, error)

	SetOdometryContext(ctx context.Context, request *SetOdometry) (*SetOdometryResponse, error)

	/* Retrieves the estimated position based on the actual velocity values */
	GetOdometry(request *GetOdometry) (*GetOdometryResponse, error)

	GetOdometryContext(ctx context.Context, request *GetOdometry) (*GetOdometryResponse, error)

	/* Service definition of function rioc__setMotorConstants */
	SetMotorConstants(request *SetMotorConstants) (*SetMotorConstantsResponse, error)

	SetMotorConstantsContext(ctx context.Context, request *SetMotorConstants) (*SetMotorConstantsResponse, error)

	/* Service definition of function rioc__getMotorConstants */
	GetMotorConstants(request *GetMotorConstants) (*GetMotorConstantsResponse, error)

	GetMotorConstantsContext(ctx context.Context, request *GetMotorConstants) (*GetMotorConstantsResponse, error)

	/* Returns the number of available digital outputs */
	NumDigitalOutput(request *NumDigitalOutput) (*NumDigitalOutputResponse, error)

	NumDigitalOutputContext(ctx context.Context, request *NumDigitalOutput) (*NumDigitalOutputResponse, error)

	/* Sets the value of a specific digital output */
	SetDigitalOutput(request *SetDigitalOutput) (*SetDigitalOutputResponse, error)

	SetDigitalOutputContext(ctx context.Context, request *SetDigitalOutput) (*SetDigitalOutputResponse, error)

	/* Returns the number of available digital inputs */
	NumDigitalInput(request *NumDigitalInput) (*NumDigitalInputResponse, error)

	NumDigitalInputContext(ctx context.Context, request *NumDigitalInput) (*NumDigitalInputResponse, error)

	/* Retrieves the value of a specific digital input in volts */
	GetDigitalInput(request *GetDigitalInput) (*GetDigitalInputResponse, error)

	GetDigitalInputContext(ctx context.Context, request *GetDigitalInput) (*GetDigitalInputResponse, error)

	/* Checks if the bumper is pressed */
	GetBumper(request *GetBumper) (*GetBumperResponse, error)

	GetBumperContext(ctx context.Context, request *GetBumper) (*GetBumperResponse, error)

	/* Returns the number of available analog inputs */
	NumAnalogInput(request *NumAnalogInput) (*NumAnalogInputResponse, error)

	NumAnalogInputContext(ctx context.Context, request *NumAnalogInput) (*NumAnalogInputResponse, error)

	/* Retrieves the value of a specific analog input */
	GetAnalogInput(request *GetAnalogInput) (*GetAnalogInputResponse, error)

	GetAnalogInputContext(ctx context.Context, request *GetAnalogInput) (*GetAnalogInputResponse, error)

	/* Service definition of function rioc__numDistanceSensors */
	NumDistanceSensors(request *NumDistanceSensors) (*NumDistanceSensorsResponse, error)

	NumDistanceSensorsContext(ctx context.Context, request *NumDistanceSensors) (*NumDistanceSensorsResponse, error)

	/* Service definition of function rioc__getDistanceSensor */
	GetDistanceSensor(request *GetDistanceSensor) (*GetDistanceSensorResponse, error)

	GetDistanceSensorContext(ctx context.Context, request *GetDistanceSensor) (*GetDistanceSensorResponse, error)

	/* Service definition of function rioc__systemCurrent */
	SystemCurrent(request *SystemCurrent) (*SystemCurrentResponse, error)

	SystemCurrentContext(ctx context.Context, request *SystemCurrent) (*SystemCurrentResponse, error)

	/* Service definition of function rioc__systemVoltage */
	SystemVoltage(request *SystemVoltage) (*SystemVoltageResponse, error)

	SystemVoltageContext(ctx context.Context, request *SystemVoltage) (*SystemVoltageResponse, error)

	/* Service definition of function rioc__setRelay */
	SetRelay(request *SetRelay) (*SetRelayResponse, error)

	SetRelayContext(ctx context.Context, request *SetRelay) (*SetRelayResponse, error)
}

type iOControlPortType struct {
	client *soap.Client
}

func NewIOControlPortType(client *soap.Client) IOControlPortType {
	return &iOControlPortType{
		client: client,
	}
}

func (service *iOControlPortType) UpdateContext(ctx context.Context, request *Update) (*SensorState, error) {
	response := new(SensorState)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) Update(request *Update) (*SensorState, error) {
	return service.UpdateContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) ResetContext(ctx context.Context, request *Reset) (*ResetResponse, error) {
	response := new(ResetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) Reset(request *Reset) (*ResetResponse, error) {
	return service.ResetContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) NumMotorsContext(ctx context.Context, request *NumMotors) (*NumMotorsResponse, error) {
	response := new(NumMotorsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) NumMotors(request *NumMotors) (*NumMotorsResponse, error) {
	return service.NumMotorsContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SetMotorVelocityContext(ctx context.Context, request *SetMotorVelocity) (*SetMotorVelocityResponse, error) {
	response := new(SetMotorVelocityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SetMotorVelocity(request *SetMotorVelocity) (*SetMotorVelocityResponse, error) {
	return service.SetMotorVelocityContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SetVelocityContext(ctx context.Context, request *SetVelocity) (*SetVelocityResponse, error) {
	response := new(SetVelocityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SetVelocity(request *SetVelocity) (*SetVelocityResponse, error) {
	return service.SetVelocityContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) ResetPositionContext(ctx context.Context, request *ResetPosition) (*ResetPositionResponse, error) {
	response := new(ResetPositionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) ResetPosition(request *ResetPosition) (*ResetPositionResponse, error) {
	return service.ResetPositionContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SetBrakeContext(ctx context.Context, request *SetBrake) (*SetBrakeResponse, error) {
	response := new(SetBrakeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SetBrake(request *SetBrake) (*SetBrakeResponse, error) {
	return service.SetBrakeContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) MotorCurrentContext(ctx context.Context, request *MotorCurrent) (*MotorCurrentResponse, error) {
	response := new(MotorCurrentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) MotorCurrent(request *MotorCurrent) (*MotorCurrentResponse, error) {
	return service.MotorCurrentContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) MotorActualPositionContext(ctx context.Context, request *MotorActualPosition) (*MotorActualPositionResponse, error) {
	response := new(MotorActualPositionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) MotorActualPosition(request *MotorActualPosition) (*MotorActualPositionResponse, error) {
	return service.MotorActualPositionContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) GetActualMotorVelocityContext(ctx context.Context, request *GetActualMotorVelocity) (*GetActualMotorVelocityResponse, error) {
	response := new(GetActualMotorVelocityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) GetActualMotorVelocity(request *GetActualMotorVelocity) (*GetActualMotorVelocityResponse, error) {
	return service.GetActualMotorVelocityContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) GetActualVelocityContext(ctx context.Context, request *GetActualVelocity) (*GetActualVelocityResponse, error) {
	response := new(GetActualVelocityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) GetActualVelocity(request *GetActualVelocity) (*GetActualVelocityResponse, error) {
	return service.GetActualVelocityContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SetOdometryContext(ctx context.Context, request *SetOdometry) (*SetOdometryResponse, error) {
	response := new(SetOdometryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SetOdometry(request *SetOdometry) (*SetOdometryResponse, error) {
	return service.SetOdometryContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) GetOdometryContext(ctx context.Context, request *GetOdometry) (*GetOdometryResponse, error) {
	response := new(GetOdometryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) GetOdometry(request *GetOdometry) (*GetOdometryResponse, error) {
	return service.GetOdometryContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SetMotorConstantsContext(ctx context.Context, request *SetMotorConstants) (*SetMotorConstantsResponse, error) {
	response := new(SetMotorConstantsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SetMotorConstants(request *SetMotorConstants) (*SetMotorConstantsResponse, error) {
	return service.SetMotorConstantsContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) GetMotorConstantsContext(ctx context.Context, request *GetMotorConstants) (*GetMotorConstantsResponse, error) {
	response := new(GetMotorConstantsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) GetMotorConstants(request *GetMotorConstants) (*GetMotorConstantsResponse, error) {
	return service.GetMotorConstantsContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) NumDigitalOutputContext(ctx context.Context, request *NumDigitalOutput) (*NumDigitalOutputResponse, error) {
	response := new(NumDigitalOutputResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) NumDigitalOutput(request *NumDigitalOutput) (*NumDigitalOutputResponse, error) {
	return service.NumDigitalOutputContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SetDigitalOutputContext(ctx context.Context, request *SetDigitalOutput) (*SetDigitalOutputResponse, error) {
	response := new(SetDigitalOutputResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SetDigitalOutput(request *SetDigitalOutput) (*SetDigitalOutputResponse, error) {
	return service.SetDigitalOutputContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) NumDigitalInputContext(ctx context.Context, request *NumDigitalInput) (*NumDigitalInputResponse, error) {
	response := new(NumDigitalInputResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) NumDigitalInput(request *NumDigitalInput) (*NumDigitalInputResponse, error) {
	return service.NumDigitalInputContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) GetDigitalInputContext(ctx context.Context, request *GetDigitalInput) (*GetDigitalInputResponse, error) {
	response := new(GetDigitalInputResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) GetDigitalInput(request *GetDigitalInput) (*GetDigitalInputResponse, error) {
	return service.GetDigitalInputContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) GetBumperContext(ctx context.Context, request *GetBumper) (*GetBumperResponse, error) {
	response := new(GetBumperResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) GetBumper(request *GetBumper) (*GetBumperResponse, error) {
	return service.GetBumperContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) NumAnalogInputContext(ctx context.Context, request *NumAnalogInput) (*NumAnalogInputResponse, error) {
	response := new(NumAnalogInputResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) NumAnalogInput(request *NumAnalogInput) (*NumAnalogInputResponse, error) {
	return service.NumAnalogInputContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) GetAnalogInputContext(ctx context.Context, request *GetAnalogInput) (*GetAnalogInputResponse, error) {
	response := new(GetAnalogInputResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) GetAnalogInput(request *GetAnalogInput) (*GetAnalogInputResponse, error) {
	return service.GetAnalogInputContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) NumDistanceSensorsContext(ctx context.Context, request *NumDistanceSensors) (*NumDistanceSensorsResponse, error) {
	response := new(NumDistanceSensorsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) NumDistanceSensors(request *NumDistanceSensors) (*NumDistanceSensorsResponse, error) {
	return service.NumDistanceSensorsContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) GetDistanceSensorContext(ctx context.Context, request *GetDistanceSensor) (*GetDistanceSensorResponse, error) {
	response := new(GetDistanceSensorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) GetDistanceSensor(request *GetDistanceSensor) (*GetDistanceSensorResponse, error) {
	return service.GetDistanceSensorContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SystemCurrentContext(ctx context.Context, request *SystemCurrent) (*SystemCurrentResponse, error) {
	response := new(SystemCurrentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SystemCurrent(request *SystemCurrent) (*SystemCurrentResponse, error) {
	return service.SystemCurrentContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SystemVoltageContext(ctx context.Context, request *SystemVoltage) (*SystemVoltageResponse, error) {
	response := new(SystemVoltageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SystemVoltage(request *SystemVoltage) (*SystemVoltageResponse, error) {
	return service.SystemVoltageContext(
		context.Background(),
		request,
	)
}

func (service *iOControlPortType) SetRelayContext(ctx context.Context, request *SetRelay) (*SetRelayResponse, error) {
	response := new(SetRelayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iOControlPortType) SetRelay(request *SetRelay) (*SetRelayResponse, error) {
	return service.SetRelayContext(
		context.Background(),
		request,
	)
}
